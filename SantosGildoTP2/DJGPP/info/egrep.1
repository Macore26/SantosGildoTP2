


GREP(1)                                                   GREP(1)


NNAAMMEE
       grep, egrep, fgrep - print lines matching a pattern

SSYYNNOOPPSSIISS
       ggrreepp  [--[AABBCC] _N_U_M] [--EEFFGGHHLLUUVVZZaabbcchhiillnnqqrrssuuvvwwxxyyzz] [--ee _P_A_T_T_E_R_N
       | --ff _F_I_L_E] [--dd _A_C_T_I_O_N] [----ddiirreeccttoorriieess==_A_C_T_I_O_N] [----eexxtteennddeedd--
       rreeggeexxpp]  [----ffiixxeedd--ssttrriinnggss] [----bbaassiicc--rreeggeexxpp] [----rreeggeexxpp==_P_A_T_-
       _T_E_R_N]   [----ffiillee==_F_I_L_E]   [----iiggnnoorree--ccaassee]    [----wwoorrdd--rreeggeexxpp]
       [----lliinnee--rreeggeexxpp] [----lliinnee--rreeggeexxpp] [----nnoo--mmeessssaaggeess] [----iinnvveerrtt--
       mmaattcchh] [----vveerrssiioonn] [----hheellpp]  [----bbyyttee--ooffffsseett]  [----lliinnee--nnuumm--
       bbeerr]     [----wwiitthh--ffiilleennaammee]    [----nnoo--ffiilleennaammee]    [----qquuiieett]
       [----ssiilleenntt] [----tteexxtt] [----ffiilleess--wwiitthhoouutt--mmaattcchh] [----ffiilleess--wwiitthh--
       mmaattcchheess]  [----ccoouunntt]  [----bbeeffoorree--ccoonntteexxtt==_N_U_M]  [----aafftteerr--ccoonn--
       tteexxtt==_N_U_M] [----ccoonntteexxtt[==_N_U_M]]  [----bbiinnaarryy]  [----uunniixx--bbyyttee--ooffff--
       sseettss] [----mmmmaapp] [----nnuullll] [----rreeccuurrssiivvee] [_f_i_l_e...]

DDEESSCCRRIIPPTTIIOONN
       GGrreepp  searches the named input _f_i_l_e_s (or standard input if
       no files are named, or the file name -- is given) for lines
       containing a match to the given _p_a_t_t_e_r_n.  By default, ggrreepp
       prints the matching lines.

       There are three major variants of ggrreepp, controlled by  the
       following options.
       --GG, ----bbaassiicc--rreeggeexxpp
              Interpret  _p_a_t_t_e_r_n  as  a  basic regular expression
              (see below).  This is the default.
       --EE, ----eexxtteennddeedd--rreeggeexxpp
              Interpret _p_a_t_t_e_r_n as an extended regular expression
              (see below).
       --FF, ----ffiixxeedd--ssttrriinnggss
              Interpret _p_a_t_t_e_r_n as a list of fixed strings, sepa-
              rated by newlines, any of which is to be matched.
       In addition, two variant  programs  eeggrreepp  and  ffggrreepp  are
       available.   EEggrreepp  is  the same as ggrreepp --EE.  FFggrreepp is the
       same as ggrreepp --FF.

       All variants of ggrreepp understand the following options:
       --AA _N_U_M, ----aafftteerr--ccoonntteexxtt==_N_U_M
              Print _N_U_M lines of trailing context after  matching
              lines.
       --BB _N_U_M, ----bbeeffoorree--ccoonntteexxtt==_N_U_M
              Print  _N_U_M lines of leading context before matching
              lines.
       --CC [_N_U_M], ----ccoonntteexxtt[==_N_U_M]
              Print _N_U_M lines (default 2) of output context.
       --_N_U_M   Same as ----ccoonntteexxtt==_N_U_M lines of leading and trailing
              context.   However, ggrreepp will never print any given
              line more than once.
       --VV, ----vveerrssiioonn
              Print the version number of ggrreepp to standard error.
              This  version  number should be included in all bug
              reports (see below).




GNU Project                 1999/10/12                          1





GREP(1)                                                   GREP(1)


       --bb, ----bbyyttee--ooffffsseett
              Print the byte offset within the input file  before
              each line of output.
       --cc, ----ccoouunntt
              Suppress  normal  output;  instead print a count of
              matching lines for each input file.  With  the  --vv,
              ----iinnvveerrtt--mmaattcchh option (see below), count non-match-
              ing lines.
       --dd _A_C_T_I_O_N, ----ddiirreeccttoorriieess==_A_C_T_I_O_N
              If an input file is a directory, use _A_C_T_I_O_N to pro-
              cess  it.   By default, _A_C_T_I_O_N is rreeaadd, which means
              that directories are read  just  as  if  they  were
              ordinary files.  If _A_C_T_I_O_N is sskkiipp, directories are
              silently skipped.  If _A_C_T_I_O_N is rreeccuurrssee, ggrreepp rreeaaddss
              aallll  ffiilleess  uunnddeerr eeaacchh ddiirreeccttoorryy,, rreeccuurrssiivveellyy;; this
              is equivalent to the --rr option.
       --ee _P_A_T_T_E_R_N, ----rreeggeexxpp==_P_A_T_T_E_R_N
              Use _P_A_T_T_E_R_N as the pattern; useful to protect  pat-
              terns beginning with --.
       --ff _F_I_L_E, ----ffiillee==_F_I_L_E
              Obtain patterns from _F_I_L_E, one per line.  The empty
              file contains zero patterns, and  therfore  matches
              nothing.
       --HH, ----wwiitthh--ffiilleennaammee
              Print the filename for each match.
       --hh, ----nnoo--ffiilleennaammee
              Suppress  the prefixing of filenames on output when
              multiple files are searched.
       --ii, ----iiggnnoorree--ccaassee
              Ignore case distinctions in both  the  _p_a_t_t_e_r_n  and
              the input files.
       --LL, ----ffiilleess--wwiitthhoouutt--mmaattcchh
              Suppress  normal  output; instead print the name of
              each input file from which no output would normally
              have  been  printed.  The scanning will stop on the
              first match.
       --ll, ----ffiilleess--wwiitthh--mmaattcchheess
              Suppress normal output; instead print the  name  of
              each  input  file  from which output would normally
              have been printed.  The scanning will stop  on  the
              first match.
       --nn, ----lliinnee--nnuummbbeerr
              Prefix  each  line  of  output with the line number
              within its input file.
       --qq, ----qquuiieett, ----ssiilleenntt
              Quiet; suppress normal output.  The  scanning  will
              stop  on the first match.  Also see the --ss or ----nnoo--
              mmeessssaaggeess option below.
       --rr, ----rreeccuurrssiivvee
              Read all files under each  directory,  recursively;
              this is equivalent to the --dd rreeccuurrssee option.
       --ss, ----nnoo--mmeessssaaggeess
              Suppress   error   messages  about  nonexistent  or
              unreadable files.   Portability  note:  unlike  GNU



GNU Project                 1999/10/12                          2





GREP(1)                                                   GREP(1)


              ggrreepp,  traditional ggrreepp did not conform to POSIX.2,
              because traditional ggrreepp lacked a --qq option and its
              --ss option behaved like GNU ggrreepp's --qq option.  Shell
              scripts intended to be portable to traditional ggrreepp
              should  avoid  both  --qq  and --ss and should redirect
              output to /dev/null instead.
       --aa, ----tteexxtt
              Do not suppress output lines  that  contain  binary
              data.   Normally,  if the first few bytes of a file
              indicate that the file contains binary  data,  ggrreepp
              outputs only a message saying that the file matches
              the pattern.  This option causes ggrreepp to act as  if
              the file is a text file, even if it would otherwise
              be treated as binary.
       --vv, ----iinnvveerrtt--mmaattcchh
              Invert the sense of matching, to select  non-match-
              ing lines.
       --ww, ----wwoorrdd--rreeggeexxpp
              Select  only  those  lines  containing matches that
              form whole words.  The test is  that  the  matching
              substring  must  either  be at the beginning of the
              line, or preceded by a non-word constituent charac-
              ter.   Similarly,  it  must be either at the end of
              the line or  followed  by  a  non-word  constituent
              character.   Word-constituent  characters  are let-
              ters, digits, and the underscore.
       --xx, ----lliinnee--rreeggeexxpp
              Select only those matches that  exactly  match  the
              whole line.
       --yy     Obsolete synonym for --ii.
       --UU, ----bbiinnaarryy
              Treat the file(s) as binary.  By default, under MS-
              DOS and MS-Windows, ggrreepp guesses the file  type  by
              looking at the contents of the first 32KB read from
              the file.  If ggrreepp decides the file is a text file,
              it  strips the CR characters from the original file
              contents (to make regular expressions with ^^ and  $$
              work  correctly).   Specifying  --UU  overrules  this
              guesswork, causing all files to be read and  passed
              to  the matching mechanism verbatim; if the file is
              a text file with CR/LF pairs at  the  end  of  each
              line,  this  will cause some regular expressions to
              fail.  This option has no effect on platforms other
              than MS-DOS and MS-Windows.
       --uu, ----uunniixx--bbyyttee--ooffffsseettss
              Report Unix-style byte offsets.  This switch causes
              ggrreepp to report byte offsets as  if  the  file  were
              Unix-style  text  file,  i.e.  with  CR  characters
              stripped off.  This will produce results  identical
              to running ggrreepp on a Unix machine.  This option has
              no effect unless --bb option is also used; it has  no
              effect  on  platforms other than MS-DOS and MS-Win-
              dows.
       ----mmmmaapp If possible, use the mmmmaapp(2) system  call  to  read



GNU Project                 1999/10/12                          3





GREP(1)                                                   GREP(1)


              input,  instead of the default rreeaadd(2) system call.
              In some situations, ----mmmmaapp  yields  better  perfor-
              mance.   However, ----mmmmaapp can cause undefined behav-
              ior (including core dumps) if an input file shrinks
              while ggrreepp is operating, or if an I/O error occurs.
       --ZZ, ----nnuullll
              Output  a  zero  byte  (the  ASCII  NNUULL  character)
              instead  of  the  character that normally follows a
              file name.  For example, ggrreepp --llZZ  outputs  a  zero
              byte after each file name instead of the usual new-
              line.  This option makes  the  output  unambiguous,
              even  in  the  presence  of  file  names containing
              unusual characters like newlines.  This option  can
              be  used  with commands like ffiinndd --pprriinntt00, ppeerrll --00,
              ssoorrtt --zz, and xxaarrggss --00  to  process  arbitrary  file
              names,  even those that contain newline characters.

RREEGGUULLAARR EEXXPPRREESSSSIIOONNSS
       A regular expression is a pattern that describes a set  of
       strings.   Regular expressions are constructed analogously
       to arithmetic expressions, by using various  operators  to
       combine smaller expressions.

       GGrreepp understands two different versions of regular expres-
       sion syntax: "basic" and "extended."  In  GNU ggrreepp,  there
       is  no  difference in available functionality using either
       syntax.  In other implementations, basic  regular  expres-
       sions   are  less  powerful.   The  following  description
       applies to extended regular expressions;  differences  for
       basic regular expressions are summarized afterwards.

       The  fundamental  building  blocks are the regular expres-
       sions that match a  single  character.   Most  characters,
       including  all letters and digits, are regular expressions
       that match themselves.   Any  metacharacter  with  special
       meaning may be quoted by preceding it with a backslash.

       A  list of characters enclosed by [[ and ]] matches any sin-
       gle character in that list; if the first character of  the
       list  is  the caret ^^ then it matches any character _n_o_t in
       the   list.    For   example,   the   regular   expression
       [[00112233445566778899]]  matches  any single digit.  A range of ASCII
       characters may be specified by giving the first  and  last
       characters, separated by a hyphen.  Finally, certain named
       classes of characters are  predefined.   Their  names  are
       self  explanatory,  and  they  are  [[::aallnnuumm::]],  [[::aallpphhaa::]],
       [[::ccnnttrrll::]],  [[::ddiiggiitt::]],  [[::ggrraapphh::]],  [[::lloowweerr::]],  [[::pprriinntt::]],
       [[::ppuunncctt::]],  [[::ssppaaccee::]],  [[::uuppppeerr::]],  and  [[::xxddiiggiitt::]]..   For
       example, [[[[::aallnnuumm::]]]] means [[00--99AA--ZZaa--zz]], except the  latter
       form  is  dependent  upon  the  ASCII  character encoding,
       whereas the former is portable.  (Note that  the  brackets
       in  these  class names are part of the symbolic names, and
       must be included in addition to  the  brackets  delimiting
       the bracket list.)  Most metacharacters lose their special



GNU Project                 1999/10/12                          4





GREP(1)                                                   GREP(1)


       meaning inside lists.  To include a  literal  ]]  place  it
       first  in  the  list.   Similarly,  to include a literal ^^
       place it anywhere but first.  Finally, to include  a  lit-
       eral -- place it last.

       The period ..  matches any single character.  The symbol \\ww
       is a synonym for [[[[::aallnnuumm::]]]]  and  \\WW  is  a  synonym  for
       [[^^[[::aallnnuumm]]]].

       The  caret ^^ and the dollar sign $$ are metacharacters that
       respectively match the empty string at the  beginning  and
       end  of  a line.  The symbols \\<< and \\>> respectively match
       the empty string at the beginning and end of a word.   The
       symbol  \\bb matches the empty string at the edge of a word,
       and \\BB matches the empty string provided it's _n_o_t  at  the
       edge of a word.

       A  regular  expression  may  be followed by one of several
       repetition operators:
       ??      The preceding item is optional and matched at  most
              once.
       **      The  preceding  item  will  be matched zero or more
              times.
       ++      The preceding item will  be  matched  one  or  more
              times.
       {{_n}}    The preceding item is matched exactly _n times.
       {{_n,,}}   The preceding item is matched _n or more times.
       {{_n,,_m}}  The preceding item is matched at least _n times, but
              not more than _m times.

       Two regular expressions may be concatenated; the resulting
       regular  expression  matches any string formed by concate-
       nating two substrings that respectively match the concate-
       nated subexpressions.

       Two  regular expressions may be joined by the infix opera-
       tor ||; the resulting regular expression matches any string
       matching either subexpression.

       Repetition  takes  precedence over concatenation, which in
       turn takes precedence over alternation.   A  whole  subex-
       pression  may be enclosed in parentheses to override these
       precedence rules.

       The backreference \\_n, where _n is a single  digit,  matches
       the  substring previously matched by the _nth parenthesized
       subexpression of the regular expression.

       In basic regular expressions the metacharacters ??,  ++,  {{,
       ||,  ((,  and  )) lose their special meaning; instead use the
       backslashed versions \\??, \\++, \\{{, \\||, \\((, and \\)).

       Traditional eeggrreepp did not support the {{ metacharacter, and
       some eeggrreepp implementations support \\{{ instead, so portable



GNU Project                 1999/10/12                          5





GREP(1)                                                   GREP(1)


       scripts should avoid {{ in eeggrreepp patterns  and  should  use
       [[{{]] to match a literal {{.

       GNU  eeggrreepp attempts to support traditional usage by assum-
       ing that {{ is not special if it would be the start  of  an
       invalid  interval  specification.   For example, the shell
       command eeggrreepp ''{{11'' searches for the  two-character  string
       {{11  instead  of  reporting  a  syntax error in the regular
       expression.  POSIX.2 allows this behavior as an extension,
       but portable scripts should avoid it.

DDIIAAGGNNOOSSTTIICCSS
       Normally, exit status is 0 if matches were found, and 1 if
       no matches were found.  (The --vv option inverts  the  sense
       of  the exit status.)  Exit status is 2 if there were syn-
       tax errors in the pattern, inaccessible  input  files,  or
       other system errors.

BBUUGGSS
       Email  bug  reports  to bbuugg--ggnnuu--uuttiillss@@ggnnuu..oorrgg.  Be sure to
       include the word "grep" somewhere in the "Subject:" field.

       Large  repetition  counts in the {{_m,,_n}} construct may cause
       grep to use lots of memory.  In  addition,  certain  other
       obscure  regular  expressions require exponential time and
       space, and may cause ggrreepp to run out of memory.

       Backreferences are very slow, and may require  exponential
       time.




























GNU Project                 1999/10/12                          6


