


INDENT(1L)                                             INDENT(1L)


NNAAMMEE
       indent  - changes the appearance of a C program by insert-
       ing or deleting whitespace.

SSYYNNOOPPSSIISS
       iinnddeenntt [options] [input-files]

       iinnddeenntt [options] [single-input-file] [-o output-file]

       iinnddeenntt --version

DDEESSCCRRIIPPTTIIOONN
       This man page is generated from the  file  _i_n_d_e_n_t_._t_e_x_i_n_f_o.
       This  is  Edition  of "The iinnddeenntt Manual", for Indent Ver-
       sion , last updated .

       The iinnddeenntt program can be used  to  make  code  easier  to
       read.   It can also convert from one style of writing C to
       another.

       iinnddeenntt understands a substantial amount about  the  syntax
       of  C,  but  it  also attempts to cope with incomplete and
       misformed syntax.

       In version 1.2 and more recent versions, the GNU style  of
       indenting is the default.

OOPPTTIIOONNSS
       --bbaadd, ----bbllaannkk--lliinneess--aafftteerr--ddeeccllaarraattiioonnss
           Force blank lines after the declarations.
           See  BBLLAANNKK LLIINNEESS.

       --bbaapp, ----bbllaannkk--lliinneess--aafftteerr--pprroocceedduurreess
           Force blank lines after procedure bodies.
           See  BBLLAANNKK LLIINNEESS.

       --bbbbbb, ----bbllaannkk--lliinneess--bbeeffoorree--bblloocckk--ccoommmmeennttss
           Force blank lines before block comments.
           See  BBLLAANNKK LLIINNEESS.

       --bbbboo, ----bbrreeaakk--bbeeffoorree--bboooolleeaann--ooppeerraattoorr
           Prefer to break long lines before boolean operators.
           See  BBRREEAAKKIINNGG LLOONNGG LLIINNEESS.

       --bbcc, ----bbllaannkk--lliinneess--aafftteerr--ccoommmmaass
           Force newline after comma in declaration.
           See  DDEECCLLAARRAATTIIOONNSS.

       --bbll, ----bbrraacceess--aafftteerr--iiff--lliinnee
           Put braces on line after iiff, etc.
           See  SSTTAATTEEMMEENNTTSS.

       --bbllii_n, ----bbrraaccee--iinnddeenntt_n
           Indent braces _n spaces.



                                                                1





INDENT(1L)                                             INDENT(1L)


           See  SSTTAATTEEMMEENNTTSS.

       --bbllss, ----bbrraacceess--aafftteerr--ssttrruucctt--ddeeccll--lliinnee
           Put braces on the line after ssttrruucctt declaration lines.
           See  DDEECCLLAARRAATTIIOONNSS.

       --bbrr, ----bbrraacceess--oonn--iiff--lliinnee
           Put braces on line with iiff, etc.
           See  SSTTAATTEEMMEENNTTSS.

       --bbrrss, ----bbrraacceess--oonn--ssttrruucctt--ddeeccll--lliinnee
           Put braces on ssttrruucctt declaration line.
           See  DDEECCLLAARRAATTIIOONNSS.

       --bbss, ----BBiillll--SShhaannnnoonn, ----bbllaannkk--bbeeffoorree--ssiizzeeooff
           Put a space between ssiizzeeooff and its argument.
           See  SSTTAATTEEMMEENNTTSS.

       --cc_n, ----ccoommmmeenntt--iinnddeennttaattiioonn_n
           Put comments to the right of code in column _n.
           See  CCOOMMMMEENNTTSS.

       --ccbbii_n, ----ccaassee--bbrraaccee--iinnddeennttaattiioonn_n
           Indent braces after a case label N spaces.
           See  SSTTAATTEEMMEENNTTSS.

       --ccdd_n, ----ddeeccllaarraattiioonn--ccoommmmeenntt--ccoolluummnn_n
           Put comments to the right of the declarations in  col-
           umn _n.
           See  CCOOMMMMEENNTTSS.

       --ccddbb, ----ccoommmmeenntt--ddeelliimmiitteerrss--oonn--bbllaannkk--lliinneess
           Put comment delimiters on blank lines.
           See  CCOOMMMMEENNTTSS.

       --ccddww, ----ccuuddddllee--ddoo--wwhhiillee
           Cuddle while of ddoo {{}} wwhhiillee;; and preceeding `}'.
           See  CCOOMMMMEENNTTSS.

       --ccee, ----ccuuddddllee--eellssee
           Cuddle else and preceeding `}'.
           See  CCOOMMMMEENNTTSS.

       --ccii_n, ----ccoonnttiinnuuaattiioonn--iinnddeennttaattiioonn_n
           Continuation indent of _n spaces.
           See  SSTTAATTEEMMEENNTTSS.

       --ccllii_n, ----ccaassee--iinnddeennttaattiioonn_n
           Case label indent of _n spaces.
           See  SSTTAATTEEMMEENNTTSS.

       --ccpp_n, ----eellssee--eennddiiff--ccoolluummnn_n
           Put  comments  to the right of ##eellssee and ##eennddiiff state-
           ments in column _n.



                                                                2





INDENT(1L)                                             INDENT(1L)


           See  CCOOMMMMEENNTTSS.

       --ccss, ----ssppaaccee--aafftteerr--ccaasstt
           Put a space after a cast operator.
           See  SSTTAATTEEMMEENNTTSS.

       --dd_n, ----lliinnee--ccoommmmeennttss--iinnddeennttaattiioonn_n
           Set indentation of comments not to the right  of  code
           to _n spaces.
           See  CCOOMMMMEENNTTSS.

       --bbffddaa, ----bbrreeaakk--ffuunnccttiioonn--ddeeccll--aarrggss
           Break  the line before all arguments in a declaration.
           See  DDEECCLLAARRAATTIIOONNSS.

       --bbffddee, ----bbrreeaakk--ffuunnccttiioonn--ddeeccll--aarrggss
           Break the line after the last argument in  a  declara-
           tion.
           See  DDEECCLLAARRAATTIIOONNSS.

       --ddii_n, ----ddeeccllaarraattiioonn--iinnddeennttaattiioonn_n
           Put variables in column _n.
           See  DDEECCLLAARRAATTIIOONNSS.

       --ffcc11, ----ffoorrmmaatt--ffiirrsstt--ccoolluummnn--ccoommmmeennttss
           Format comments in the first column.
           See  CCOOMMMMEENNTTSS.

       --ffccaa, ----ffoorrmmaatt--aallll--ccoommmmeennttss
           Do not disable all formatting of comments.
           See  CCOOMMMMEENNTTSS.

       --ggnnuu, ----ggnnuu--ssttyyllee
           Use GNU coding style.  This is the default.
           See  CCOOMMMMOONN SSTTYYLLEESS.

       --hhnnll, ----hhoonnoouurr--nneewwlliinneess
           Prefer to break long lines at the position of newlines
           in the input.
           See  BBRREEAAKKIINNGG LLOONNGG LLIINNEESS.

       --ii_n, ----iinnddeenntt--lleevveell_n
           Set indentation level to _n spaces.
           See  IINNDDEENNTTAATTIIOONN.

       --iipp_n, ----ppaarraammeetteerr--iinnddeennttaattiioonn_n
           Indent parameter types in old-style  function  defini-
           tions by _n spaces.
           See  IINNDDEENNTTAATTIIOONN.

       --kkrr, ----kk--aanndd--rr--ssttyyllee
           Use Kernighan & Ritchie coding style.
           See  CCOOMMMMOONN SSTTYYLLEESS.




                                                                3





INDENT(1L)                                             INDENT(1L)


       --ll_n, ----lliinnee--lleennggtthh_n
           Set maximum line length for non-comment lines to _n.
           See  BBRREEAAKKIINNGG LLOONNGG LLIINNEESS.

       --llcc_n, ----ccoommmmeenntt--lliinnee--lleennggtthh_n
           Set maximum line length for comment formatting to _n.
           See  CCOOMMMMEENNTTSS.

       --llpp, ----ccoonnttiinnuuee--aatt--ppaarreenntthheesseess
           Line up continued lines at parentheses.
           See  IINNDDEENNTTAATTIIOONN.

       --llppss, ----lleeaavvee--pprreepprroocceessssoorr--ssppaaccee
           Leave space between `#' and preprocessor directive.
           See  IINNDDEENNTTAATTIIOONN.

       --nnbbaadd, ----nnoo--bbllaannkk--lliinneess--aafftteerr--ddeeccllaarraattiioonnss
           Do not force blank lines after declarations.
           See  BBLLAANNKK LLIINNEESS.

       --nnbbaapp, ----nnoo--bbllaannkk--lliinneess--aafftteerr--pprroocceedduurreess
           Do not force blank lines after procedure bodies.
           See  BBLLAANNKK LLIINNEESS.

       --nnbbbboo, ----bbrreeaakk--aafftteerr--bboooolleeaann--ooppeerraattoorr
           Do not prefer to break long lines before boolean oper-
           ators.
           See  BBRREEAAKKIINNGG LLOONNGG LLIINNEESS.

       --nnbbcc, ----nnoo--bbllaannkk--lliinneess--aafftteerr--ccoommmmaass
           Do not force newlines after commas in declarations.
           See  DDEECCLLAARRAATTIIOONNSS.

       --nnbbffddaa, ----ddoonntt--bbrreeaakk--ffuunnccttiioonn--ddeeccll--aarrggss
           Don't put each argument in a function declaration on a
           seperate line.
           See  DDEECCLLAARRAATTIIOONNSS.

       --nnccddbb, ----nnoo--ccoommmmeenntt--ddeelliimmiitteerrss--oonn--bbllaannkk--lliinneess
           Do not put comment delimiters on blank lines.
           See  CCOOMMMMEENNTTSS.

       --nnccddww, ----ddoonntt--ccuuddddllee--ddoo--wwhhiillee
           Do not cuddle }} and the wwhhiillee of a ddoo {{}} wwhhiillee;;.
           See  SSTTAATTEEMMEENNTTSS.

       --nnccee, ----ddoonntt--ccuuddddllee--eellssee
           Do not cuddle }} and eellssee.
           See  SSTTAATTEEMMEENNTTSS.

       --nnccss, ----nnoo--ssppaaccee--aafftteerr--ccaassttss
           Do not put a space after cast operators.
           See  SSTTAATTEEMMEENNTTSS.




                                                                4





INDENT(1L)                                             INDENT(1L)


       --nnffcc11, ----ddoonntt--ffoorrmmaatt--ffiirrsstt--ccoolluummnn--ccoommmmeennttss
           Do  not format comments in the first column as normal.
           See  CCOOMMMMEENNTTSS.

       --nnffccaa, ----ddoonntt--ffoorrmmaatt--ccoommmmeennttss
           Do not format any comments.
           See  CCOOMMMMEENNTTSS.

       --nnhhnnll, ----iiggnnoorree--nneewwlliinneess
           Do not prefer to break long lines at the  position  of
           newlines in the input.
           See  BBRREEAAKKIINNGG LLOONNGG LLIINNEESS.

       --nniipp, ----nnoo--ppaarraammeetteerr--iinnddeennttaattiioonn
           Zero width indentation for parameters.
           See  IINNDDEENNTTAATTIIOONN.

       --nnllpp, ----ddoonntt--lliinnee--uupp--ppaarreenntthheesseess
           Do not line up parentheses.
           See  SSTTAATTEEMMEENNTTSS.

       --nnppccss, ----nnoo--ssppaaccee--aafftteerr--ffuunnccttiioonn--ccaallll--nnaammeess
           Do not put space after the function in function calls.
           See  SSTTAATTEEMMEENNTTSS.

       --nnpprrss, ----nnoo--ssppaaccee--aafftteerr--ppaarreenntthheesseess
           Do not put a space after every '('  and  before  every
           ')'.
           See  SSTTAATTEEMMEENNTTSS.

       --nnppssll, ----ddoonntt--bbrreeaakk--pprroocceedduurree--ttyyppee
           Put  the  type  of a procedure on the same line as its
           name.
           See  DDEECCLLAARRAATTIIOONNSS.

       --nnssaaff, ----nnoo--ssppaaccee--aafftteerr--ffoorr
           Do not put a space after every ffoorr.
           See  SSTTAATTEEMMEENNTTSS.

       --nnssaaii, ----nnoo--ssppaaccee--aafftteerr--iiff
           Do not put a space after every iiff.
           See  SSTTAATTEEMMEENNTTSS.

       --nnssaaww, ----nnoo--ssppaaccee--aafftteerr--wwhhiillee
           Do not put a space after every wwhhiillee.
           See  SSTTAATTEEMMEENNTTSS.

       --nnsscc, ----ddoonntt--ssttaarr--ccoommmmeennttss
           Do not put the `*' character at the left of  comments.
           See  CCOOMMMMEENNTTSS.

       --nnssoobb, ----lleeaavvee--ooppttiioonnaall--bbllaannkk--lliinneess
           Do not swallow optional blank lines.
           See  BBLLAANNKK LLIINNEESS.



                                                                5





INDENT(1L)                                             INDENT(1L)


       --nnssss, ----ddoonntt--ssppaaccee--ssppeecciiaall--sseemmiiccoolloonn
           Do  not  force a space before the semicolon after cer-
           tain statements.  Disables `-ss'.
           See  SSTTAATTEEMMEENNTTSS.

       --nnuutt, ----nnoo--ttaabbss
           Use spaces instead of tabs.
           See  IINNDDEENNTTAATTIIOONN.

       --nnvv, ----nnoo--vveerrbboossiittyy
           Disable verbose mode.
           See  MMIISSCCEELLLLAANNEEOOUUSS OOPPTTIIOONNSS.

       --oorriigg, ----oorriiggiinnaall
           Use the original Berkeley coding style.
           See  CCOOMMMMOONN SSTTYYLLEESS.

       --nnpprroo, ----iiggnnoorree--pprrooffiillee
           Do not read `.indent.pro' files.
           See  IINNVVOOKKIINNGG IINNDDEENNTT.

       --ppccss, ----ssppaaccee--aafftteerr--pprroocceedduurree--ccaallllss
           Insert a space between the name of the procedure being
           called and the `('.
           See  SSTTAATTEEMMEENNTTSS.

       --ppii_n, ----ppaarreenn--iinnddeennttaattiioonn_n
           Specify the extra indentation per open parentheses '('
           when a statement is broken.See  SSTTAATTEEMMEENNTTSS.

       --ppmmtt, ----pprreesseerrvvee--mmttiimmee
           Preserve  access  and  modification  times  on  output
           files.See  MMIISSCCEELLLLAANNEEOOUUSS OOPPTTIIOONNSS.

       --pprrss, ----ssppaaccee--aafftteerr--ppaarreenntthheesseess
           Put a space after every '(' and before every ')'.
           See  SSTTAATTEEMMEENNTTSS.

       --ppssll, ----pprrooccnnaammeess--ssttaarrtt--lliinneess
           Put  the  type  of  a procedure on the line before its
           name.
           See  DDEECCLLAARRAATTIIOONNSS.

       --ssaaff, ----ssppaaccee--aafftteerr--ffoorr
           Put a space after each ffoorr.
           See  SSTTAATTEEMMEENNTTSS.

       --ssaaii, ----ssppaaccee--aafftteerr--iiff
           Put a space after each iiff.
           See  SSTTAATTEEMMEENNTTSS.

       --ssaaww, ----ssppaaccee--aafftteerr--wwhhiillee
           Put a space after each wwhhiillee.
           See  SSTTAATTEEMMEENNTTSS.



                                                                6





INDENT(1L)                                             INDENT(1L)


       --ssbbii_n, ----ssttrruucctt--bbrraaccee--iinnddeennttaattiioonn_n
           Indent braces of a struct, union or enum N spaces.
           See  SSTTAATTEEMMEENNTTSS.

       --sscc, ----ssttaarrtt--lleefftt--ssiiddee--ooff--ccoommmmeennttss
           Put the `*' character at the left of comments.
           See  CCOOMMMMEENNTTSS.

       --ssoobb, ----sswwaallllooww--ooppttiioonnaall--bbllaannkk--lliinneess
           Swallow optional blank lines.
           See  BBLLAANNKK LLIINNEESS.

       --ssss, ----ssppaaccee--ssppeecciiaall--sseemmiiccoolloonn
           On one-line ffoorr and wwhhiillee  statments,  force  a  blank
           before the semicolon.
           See  SSTTAATTEEMMEENNTTSS.

       --sstt, ----ssttaannddaarrdd--oouuttppuutt
           Write to standard output.
           See  IINNVVOOKKIINNGG IINNDDEENNTT.

       --TT  Tell iinnddeenntt the name of typenames.
           See  DDEECCLLAARRAATTIIOONNSS.

       --ttss_n, ----ttaabb--ssiizzee_n
           Set tab size to _n spaces.
           See  IINNDDEENNTTAATTIIOONN.

       --uutt, ----uussee--ttaabbss
           Use tabs. This is the default.
           See  IINNDDEENNTTAATTIIOONN.

       --vv, ----vveerrbboossee
           Enable verbose mode.
           See  MMIISSCCEELLLLAANNEEOOUUSS OOPPTTIIOONNSS.

       --vveerrssiioonn
           Output the version number of iinnddeenntt.
           See  MMIISSCCEELLLLAANNEEOOUUSS OOPPTTIIOONNSS.


IINNVVOOKKIINNGG IINNDDEENNTT
       As of version 1.3, the format of the iinnddeenntt command is:


            indent [_o_p_t_i_o_n_s] [_i_n_p_u_t_-_f_i_l_e_s]

            indent [_o_p_t_i_o_n_s] [_s_i_n_g_l_e_-_i_n_p_u_t_-_f_i_l_e] [-o _o_u_t_p_u_t_-_f_i_l_e]


       This  format  is different from earlier versions and other
       versions of iinnddeenntt.

       In the first form, one or more input files are  specified.



                                                                7





INDENT(1L)                                             INDENT(1L)


       iinnddeenntt  makes a backup copy of each file, and the original
       file  is  replaced  with  its   indented   version.    See
       BBAACCKKUUPP FFIILLEESS,  for an explanation of how backups are made.

       In the second form, only one input file is specified.   In
       this  case,  or  when  the standard input is used, you may
       specify an output file after the `-o' option.

       To cause iinnddeenntt to write to standard output, use the `-st'
       option.  This is only allowed when there is only one input
       file, or when the standard input is used.

       If no input files are named, the standard  input  is  read
       for  input.   Also,  if a filename named `-' is specified,
       then the standard input is read.

       As an example, each of the following commands  will  input
       the  program  `slithy_toves.c' and write its indented text
       to `slithy_toves.out':


            indent slithy_toves.c -o slithy_toves.out

            indent -st slithy_toves.c > slithy_toves.out

            cat slithy_toves.c | indent -o slithy_toves.out


       Most other options to iinnddeenntt control how programs are for-
       matted.   As of version 1.2, iinnddeenntt also recognizes a long
       name for each option name.  Long options are  prefixed  by
       either  `--' or `+'.  [ `+' is being superseded by `--' to
       maintain consistency with the POSIX standard.]
        In most of this document, the  traditional,  short  names
       are used for the sake of brevity.  See OOPPTTIIOONN SSUUMMMMAARRYY, for
       a list of options, including both long and short names.

       Here is another example:

            indent -br test/metabolism.c -l85

       This will indent the program `test/metabolism.c' using the
       `-br'  and  `-l85'  options,  write  the  output  back  to
       `test/metabolism.c', and write the  original  contents  of
       `test/metabolism.c'  to  a  backup  file  in the directory
       `test'.

       Equivalent invocations using long option  names  for  this
       example would be:


            indent --braces-on-if-line --line-length185 test/metabolism.c

            indent +braces-on-if-line +line-length185 test/metabolism.c



                                                                8





INDENT(1L)                                             INDENT(1L)


       If  you  find  that  you  often  use  iinnddeenntt with the same
       options, you may put  those  options  into  a  file  named
       `.indent.pro'.   iinnddeenntt  will  look  for a profile file in
       three places. First it will check the environment variable
       IINNDDEENNTT__PPRROOFFIILLEE.  If  that  exists its value is expected to
       name the file that is to be used. If the environment vari-
       able does not exist, indent looks for `.indent.pro' in the
       current directory
        and use that if found.  Finally iinnddeenntt will  search  your
       home  directory  for `.indent.pro' and use that file if it
       is found.  This behaviour is different from that of  other
       versions  of  iinnddeenntt,  which  load both files if they both
       exist.

       The format of `.indent.pro' is simply a list  of  options,
       just  as  they would appear on the command line, separated
       by white space (tabs, spaces, and newlines).   Options  in
       `.indent.pro'  may  be surrounded by C or C++ comments, in
       which case they are ignored.

       Note that on MS-DOS and MS-Windows, the  profile  file  is
       called  `indent.pro', without a leading dot, because these
       systems don't allow more  than  one  dot  in  a  filename.
       Also,  since  users  do  not  generally  have special home
       directories on these systems, you will  need  to  set  the
       HHOOMMEE  environment  variable  to point to a directory where
       your default `indent.pro' file  is  stored,  if  you  want
       iinnddeenntt to find it in a directory other than the current.

       Command   line   switches  are  handled  _a_f_t_e_r  processing
       `.indent.pro'.  Options specified later override arguments
       specified  earlier,  with one exception: Explicitly speci-
       fied  options  always  override  background  options  (See
       CCOOMMMMOONN SSTTYYLLEESS).   You  can  prevent iinnddeenntt from reading an
       `.indent.pro' file by specifying the `-npro' option.


BBAACCKKUUPP FFIILLEESS
       As of version  1.3,  GNU  iinnddeenntt  makes  GNU-style  backup
       files,  the  same  way  GNU  Emacs  does.  This means that
       either _s_i_m_p_l_e or _n_u_m_b_e_r_e_d backup filenames may be made.

       Simple backup file names are generated by appending a suf-
       fix  to the original file name.  The default for this suf-
       fix is the one-character string `~'  (tilde).   Thus,  the
       backup file for `python.c' would be `python.c~'.

       Instead  of  the  default, you may specify any string as a
       suffix  by   setting   the   environment   variable   SSIIMM--
       PPLLEE__BBAACCKKUUPP__SSUUFFFFIIXX to your preferred suffix.

       Numbered backup versions of a file `momeraths.c' look like
       `momeraths.c.~23~', where 23 is the version of  this  par-
       ticular backup.  When making a numbered backup of the file



                                                                9





INDENT(1L)                                             INDENT(1L)


       `src/momeraths.c',  the  backup   file   will   be   named
       `src/momeraths.c.~_V~',  where  _V  is  one greater than the
       highest version currently existing in the directory `src'.
       The environment variable VVEERRSSIIOONN__WWIIDDTTHH controls the number
       of digits, using left zero padding  when  necessary.   For
       instance,  setting  this  variable to "2" will lead to the
       backup file being named `momeraths.c.~04~'.

       The type of backup file made is controlled by the value of
       the  environment  variable  VVEERRSSIIOONN__CCOONNTTRROOLL.  If it is the
       string `simple', then only simple backups  will  be  made.
       If its value is the string `numbered', then numbered back-
       ups will be made.  If its  value  is  `numbered-existing',
       then  numbered backups will be made if there _a_l_r_e_a_d_y _e_x_i_s_t
       numbered backups for the file being indented; otherwise, a
       simple  backup  is  made.   If VVEERRSSIIOONN__CCOONNTTRROOLL is not set,
       then iinnddeenntt assumes the behaviour of  `numbered-existing'.

       The  MS-DOS/MS-Windows version of iinnddeenntt supports numbered
       backups only on Windows 9x, where filenames are allowed to
       have  more than a single dot.  On other MS platforms, set-
       ting VVEERRSSIIOONN__CCOONNTTRROOLL to  `numbered'  has  no  effect,  and
       iinnddeenntt  will  always  produce either a simple-style backup
       file or no backups at all (if you set  VVEERRSSIIOONN__CCOONNTTRROOLL  to
       `never').

       Other  versions  of iinnddeenntt use the suffix `.BAK' in naming
       backup files.  This behaviour can be emulated  by  setting
       SSIIMMPPLLEE__BBAACCKKUUPP__SSUUFFFFIIXX to `.BAK'.

       Note  also  that  other versions of iinnddeenntt make backups in
       the current directory, rather than in the directory of the
       source file as GNU iinnddeenntt now does.


CCOOMMMMOONN SSTTYYLLEESS
       There  are  several common styles of C code, including the
       GNU style, the Kernighan & Ritchie style, and the original
       Berkeley  style.   A  style  may be selected with a single
       _b_a_c_k_g_r_o_u_n_d option, which specifies a set of values for all
       other  options.   However,  explicitly  specified  options
       always override options implied by a background option.

       As of version 1.2, the default style of GNU iinnddeenntt is  the
       GNU style.  Thus, it is no longer necessary to specify the
       option `-gnu' to obtain this  format,  although  doing  so
       will not cause an error.  Option settings which correspond
       to the GNU style are:

            -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
            -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -nprs -psl -saf -sai
            -saw -nsc -nsob

       The GNU coding style is that preferred by the GNU project.



                                                               10





INDENT(1L)                                             INDENT(1L)


       It  is  the style that the GNU Emacs C mode encourages and
       which is used in the C portions  of  GNU  Emacs.   (People
       interested  in writing programs for Project GNU should get
       a copy of "The GNU Coding Standards",  which  also  covers
       semantic  and portability issues such as memory usage, the
       size of integers, etc.)

       The Kernighan & Ritchie style  is  used  throughout  their
       well-known  book  "The  C  Programming  Language".   It is
       enabled with the `-kr' option.  The  Kernighan  &  Ritchie
       style corresponds to the following set of options:

            -nbad -bap -bbo -nbc -br -brs -c33 -cd33 -ncdb -ce -ci4 -cli0
            -cp33 -cs -d0 -di1 -nfc1 -nfca -hnl -i4 -ip0 -l75 -lp -npcs
            -nprs -npsl -saf -sai -saw -nsc -nsob -nss

       Kernighan  &  Ritchie  style  does not put comments to the
       right of code in the same column at all times (nor does it
       use  only one space to the right of the code), so for this
       style iinnddeenntt has arbitrarily chosen column 33.

       The style of the original Berkeley iinnddeenntt may be  obtained
       by  specifying  `-orig'  (or  by  specifying `--original',
       using the long option name).  This style is equivalent  to
       the following settings:

            -nbad -nbap -bbo -bc -br -brs -c33 -cd33 -cdb -ce -ci4 -cli0
            -cp33 -di16 -fc1 -fca -hnl -i4 -ip4 -l75 -lp -npcs -nprs -psl
            -saf -sai -saw -sc -nsob -nss -ts8


BBLLAANNKK LLIINNEESS
       Various  programming  styles  use blank lines in different
       places.  iinnddeenntt has a  number  of  options  to  insert  or
       delete blank lines in specific places.

       The  `-bad'  option  causes  iinnddeenntt  to force a blank line
       after every block of  declarations.   The  `-nbad'  option
       causes iinnddeenntt not to force such blank lines.

       The  `-bap'  option forces a blank line after every proce-
       dure body.  The `-nbap' option forces no such blank  line.

       The  `-bbb'  option forces a blank line before every boxed
       comment (See CCOOMMMMEENNTTSS.)  The `-nbbb' option does not force
       such blank lines.

       The  `-sob' option causes iinnddeenntt to swallow optional blank
       lines (that is, any optional blank lines  present  in  the
       input will be removed from the output).  If the `-nsob' is
       specified, any blank lines present in the input file  will
       be copied to the output file.





                                                               11





INDENT(1L)                                             INDENT(1L)


----bbllaannkk--lliinneess--aafftteerr--ddeeccllaarraattiioonnss
       The `-bad' option forces a blank line after every block of
       declarations.  The `-nbad' option does not  add  any  such
       blank lines.

       For example, given the input
            char *foo;
            char *bar;
            /* This separates blocks of declarations.  */
            int baz;

       iinnddeenntt --bbaadd produces

            char *foo;
            char *bar;

            /* This separates blocks of declarations.  */
            int baz;

       and iinnddeenntt --nnbbaadd produces

            char *foo;
            char *bar;
            /* This separates blocks of declarations.  */
            int baz;


----bbllaannkk--lliinneess--aafftteerr--pprroocceedduurreess
       The  `-bap'  option forces a blank line after every proce-
       dure body.

       For example, given the input

            int
            foo ()
            {
              puts("Hi");
            }
            /* The procedure bar is even less interesting.  */
            char *
            bar ()
            {
              puts("Hello");
            }

       iinnddeenntt --bbaapp produces

            int
            foo ()
            {
              puts ("Hi");
            }

            /* The procedure bar is even less interesting.  */



                                                               12





INDENT(1L)                                             INDENT(1L)


            char *
            bar ()
            {
              puts ("Hello");
            }

       and iinnddeenntt --nnbbaapp produces

            int
            foo ()
            {
              puts ("Hi");
            }
            /* The procedure bar is even less interesting.  */
            char *
            bar ()
            {
              puts ("Hello");
            }

       No blank line will be added after the procedure ffoooo.


CCOOMMMMEENNTTSS
       iinnddeenntt formats both C and C++  comments.  C  comments  are
       begun with `/*', terminated with `*/' and may contain new-
       line characters.  C++ comments begin  with  the  delimiter
       `//' and end at the newline.

       iinnddeenntt  handles  comments differently depending upon their
       context.  iinnddeenntt attempts to distinguish between  comments
       which  follow  statements,  comments which follow declara-
       tions, comments  following  preprocessor  directives,  and
       comments which are not preceded by code of any sort, i.e.,
       they begin the text of the line (although not neccessarily
       in column 1).

       iinnddeenntt  further  distinguishes between comments found out-
       side of procedures and aggregates, and those found  within
       them.   In  particular,  comments  beginning  a line found
       within a procedure will be indented to the column at which
       code  is currently indented.  The exception to this a com-
       ment beginning in the leftmost column;  such a comment  is
       output at that column.

       iinnddeenntt  attempts  to  leave _b_o_x_e_d _c_o_m_m_e_n_t_s unmodified. The
       general idea of such a comment is that it is enclosed in a
       rectangle or ``box'' of stars or dashes to visually set it
       apart.  More precisely,  boxed  comments  are  defined  as
       those in which the initial `/*' is followed immediately by
       the character `*', `=', `_', or `-', or those in which the
       beginning comment delimiter (`/*') is on a line by itself,
       and the following line begins with a `*' in the same  col-
       umn as the star of the opening delimiter.



                                                               13





INDENT(1L)                                             INDENT(1L)


       Examples of boxed comments are:

            /**********************
             * Comment in a box!! *
             **********************/

                   /*
                    * A different kind of scent,
                    * for a different kind of comment.
                    */

       iinnddeenntt  attempts  to  leave boxed comments exactly as they
       are found in the source file.  Thus the indentation of the
       comment is unchanged, and its length is not checked in any
       way.  The only alteration made is  that  an  embedded  tab
       character  may be converted into the appropriate number of
       spaces.

       If the `-bbb' option is specified, all such boxed comments
       will be preceded by a blank line, unless such a comment is
       preceded by code.

       Comments which are not boxed comments  may  be  formatted,
       which  means that the line is broken to fit within a right
       margin and left-filled with whitespace.   Single  newlines
       are  equivalent  to  a space, but blank lines (two or more
       newlines in a row) are taken to mean  a  paragraph  break.
       Formatting  of comments which begin after the first column
       is enabled with the `-fca' option.  To format those begin-
       ning  in  column  one, specify `-fc1'.  Such formatting is
       disabled by default.

       The right margin for formatting defaults to 78, but may be
       changed  with  the  `-lc' option.  If the margin specified
       does not allow the comment to be printed, the margin  will
       be  automatically  extended  for the duration of that com-
       ment.  The margin is not respected if the comment  is  not
       being formatted.

       If  the  comment  begins a line (i.e., there is no program
       text to its left), it will be indented to  the  column  it
       was found in unless the comment is within a block of code.
       In that case, such a comment  will  be  aligned  with  the
       indented  code  of that block (unless the comment began in
       the first column).  This alignment may be affected by  the
       `-d'  option, which specifies an amount by which such com-
       ments are moved to the _l_e_f_t, or unindented.  For  example,
       `-d2'  places comments two spaces to the left of code.  By
       default, comments are aligned with code, unless they begin
       in  the first column, in which case they are left there by
       default --- to get them aligned  with  the  code,  specify
       `-fc1'.

       Comments  to  the  right of code will appear by default in



                                                               14





INDENT(1L)                                             INDENT(1L)


       column 33.  This may be changed with one of three options.
       `-c'  will specify the column for comments following code,
       `-cd' specifies the column for comments following declara-
       tions, and `-cp' specifies the column for comments follow-
       ing preprocessor directives ##eellssee and ##eennddiiff.

       If the code to the left of the comment exceeds the  begin-
       ning  column,  the  comment column will be extended to the
       next tabstop column past the end of the code,  or  in  the
       case of preprocessor directives, to one space past the end
       of the directive.  This extension lasts only for the  out-
       put of that particular comment.

       The  `-cdb'  option places the comment delimiters on blank
       lines.  Thus, a single line comment like //** LLoovviinngg hhuugg  **//
       can be transformed into:

            /*
               Loving hug
             */

       Stars  can  be  placed at the beginning of multi-line com-
       ments with the `-sc' option.  Thus, the  single-line  com-
       ment above can be transformed (with `-cdb -sc') into:

            /*
             * Loving hug
             */


SSTTAATTEEMMEENNTTSS
       The  `-br' or `-bl' option specifies how to format braces.

       The `-br' option formats statement braces like this:

            if (x > 0) {
              x--;
            }

       The `-bl' option formats them like this:

            if (x > 0)
              {
                x--;
              }

       If you use the `-bl' option, you may also want to  specify
       the  `-bli'  option.   This option specifies the number of
       spaces  by  which  braces  are  indented.   `-bli2',   the
       default, gives the result shown above.  `-bli0' results in
       the following:

            if (x > 0)
            {



                                                               15





INDENT(1L)                                             INDENT(1L)


              x--;
            }

       If you are using the `-br' option, you  probably  want  to
       also use the `-ce' option.  This causes the eellssee in an if-
       then-else construct to cuddle up to the  immediately  pre-
       ceding  `}'.  For example, with `-br -ce' you get the fol-
       lowing:

            if (x > 0) {
              x--;
            } else {
              fprintf (stderr, "...something wrong?\n");
            }

       With `-br -nce' that code would appear as

            if (x > 0) {
              x--;
            }
            else {
              fprintf (stderr, "...something wrong?\n");
            }

       This causes the wwhhiillee in a do-while loop to cuddle  up  to
       the  immediately  preceding `}'.  For example, with `-cdw'
       you get the following:

            do {
              x--;
            } while (x);

       With `-ncdw' that code would appear as

            do {
              x--;
            }
            while (x);

       The `-cli' option specifies the number of spaces that case
       labels  should  be indented to the right of the containing
       sswwiittcchh statement.

       The default gives code like:

            switch (i)
              {
              case 0:
                break;
              case 1:
                {
                  ++i;
                }
              default:



                                                               16





INDENT(1L)                                             INDENT(1L)


                break;
              }

       Using the `-cli2' that would become:

            switch (i)
              {
                case 0:
                  break;
                case 1:
                  {
                    ++i;
                  }
                default:
                  break;
              }

       The indentation of the braces below a case  statement  can
       be controlled with the `-cbi_n' option.  For example, using
       `-cli2 -cbi0' results in:

            switch (i)
              {
                case 0:
                  break;
                case 1:
                {
                  ++i;
                }
                default:
                  break;
              }

       If a semicolon is on the same  line  as  a  ffoorr  or  wwhhiillee
       statement,  the  `-ss'  option  will  cause  a space to be
       placed before the semicolon.  This  emphasizes  the  semi-
       colon,  making  it clear that the body of the ffoorr or wwhhiillee
       statement is an empty  statement.   `-nss'  disables  this
       feature.

       The  `-pcs' option causes a space to be placed between the
       name of the procedure being called and the `(' (for  exam-
       ple,   ppuuttss ((""HHii""));;.    The   `-npcs'  option  would  give
       ppuuttss((""HHii""));;).


       If the `-cs' option is  specified,  iinnddeenntt  puts  a  space
       after a cast operator.

       The `-bs' option ensures that there is a space between the
       keyword ssiizzeeooff and its argument.  In some  versions,  this
       is known as the `Bill_Shannon' option.

       The  `-saf'  option  forces a space between an ffoorr and the



                                                               17





INDENT(1L)                                             INDENT(1L)


       following parenthesis.  This is the default.

       The `-sai' option forces a space between  an  iiff  and  the
       following parenthesis.  This is the default.

       The  `-saw' option forces a space between an wwhhiillee and the
       following parenthesis.  This is the default.

       The `-prs' option causes all parentheses to  be  seperated
       with  a space from the what is between them.  For example,
       using `-prs' results in code like:

              while ( ( e_code - s_code ) < ( dec_ind - 1 ) )
                {
                  set_buf_break ( bb_dec_ind );
                  *e_code++ = ' ';
                }


DDEECCLLAARRAATTIIOONNSS
       By default iinnddeenntt will line up identifiers, in the  column
       specified by the `-di' option.  For example, `-di16' makes
       things look like:

            int             foo;
            char           *bar;

       Using a small value (such as one or  two)  for  the  `-di'
       option  can  be used to cause the identifiers to be placed
       in the first available position; for example:

            int foo;
            char *bar;

       The value given to the  `-di'  option  will  still  affect
       variables  which  are  put  on  separate  lines from their
       types, for example `-di2' will lead to:

            int
              foo;

       If the `-bc' option is  specified,  a  newline  is  forced
       after each comma in a declaration.  For example,

            int a,
              b,
              c;

       With the `-nbc' option this would look like

            int a, b, c;

       The `-bfda' option causes a newline to be forced after the
       comma separating the arguments of a function  declaration.



                                                               18





INDENT(1L)                                             INDENT(1L)


       The  arguments  will  appear at one indention level deeper
       than the function declaration.  This is particularly help-
       ful  for  functions  with long argument lists.  The option
       `-bfde' causes a newline to be forced before  the  closing
       bracket  of the function declaration. For both options the
       'n' setting is the default: -nbdfa and -nbdfe.


       For example,

            void foo (int arg1, char arg2, int *arg3, long arg4, char arg5);
       With the `-bfda' option this would look like

            void foo (
                int arg1,
                char arg2,
                int *arg3,
                long arg4,
                char arg5);

       With, in addition, the `-bfde' option this would look like

            void foo (
                int arg1,
                char arg2,
                int *arg3,
                long arg4,
                char arg5
                );

       The  `-psl'  option  causes  the type of a procedure being
       defined to be placed on the line before the  name  of  the
       procedure.   This  style is required for the eettaaggss program
       to work correctly, as well as some of the cc--mmooddee functions
       of Emacs.

       You  must  use  the `-T' option to tell iinnddeenntt the name of
       all the typenames in your  program  that  are  defined  by
       ttyyppeeddeeff.   `-T'  can  be specified more than once, and all
       names specified are used.  For example,  if  your  program
       contains

            typedef unsigned long CODE_ADDR;
            typedef enum {red, blue, green} COLOR;

       you would use the options `-T CODE_ADDR -T COLOR'.

       The `-brs' or `-bls' option specifies how to format braces
       in struct declarations.  The `-brs' option formats  braces
       like this:

            struct foo {
              int x;
            };



                                                               19





INDENT(1L)                                             INDENT(1L)


       The `-bls' option formats them like this:

            struct foo
            {
              int x;
            };


IINNDDEENNTTAATTIIOONN
       One  issue  in the formatting of code is how far each line
       should be indented from the left margin.  When the  begin-
       ning  of a statement such as iiff or ffoorr is encountered, the
       indentation level is increased by the value  specified  by
       the  `-i'  option.   For  example, use `-i8' to specify an
       eight character indentation for each level.  When a state-
       ment  is  broken  across  two  lines,  the  second line is
       indented by a number of additional spaces specified by the
       `-ci' option.  `-ci' defaults to 0.  However, if the `-lp'
       option is specified, and a line  has  a  left  parenthesis
       which  is not closed on that line, then continuation lines
       will be lined up to start at the character  position  just
       after  the left parenthesis.  This processing also applies
       to `[' and applies to `{' when it occurs in initialization
       lists.   For example, a piece of continued code might look
       like this with `-nlp -ci3' in effect:

              p1 = first_procedure (second_procedure (p2, p3),
                 third_procedure (p4, p5));

       With `-lp' in effect the code looks somewhat clearer:

              p1 = first_procedure (second_procedure (p2, p3),
                                    third_procedure (p4, p5));

       When a statement is broken in between two  or  more  paren
       pairs  (...), each extra pair causes the indentation level
       extra indentation:

            if ((((i < 2 &&
                    k > 0) || p == 0) &&
                q == 1) ||
              n = 0)

       The option `-ip_N' can be used to set the extra offset  per
       paren.  For instance, `-ip0' would format the above as:

            if ((((i < 2 &&
              k > 0) || p == 0) &&
              q == 1) ||
              n = 0)

       iinnddeenntt  assumes  that tabs are placed at regular intervals
       of both input and output character streams.  These  inter-
       vals  are  by  default  8 columns wide, but (as of version



                                                               20





INDENT(1L)                                             INDENT(1L)


       1.2) may be changed by the `-ts' option.  Tabs are treated
       as the equivalent number of spaces.

       The indentation of type declarations in old-style function
       definitions is controlled by the `-ip' parameter.  This is
       a  numeric  parameter specifying how many spaces to indent
       type declarations.  For example, the default `-ip5'  makes
       definitions look like this:

            char *
            create_world (x, y, scale)
                 int x;
                 int y;
                 float scale;
            {
              . . .
            }

       For  compatibility  with  other  versions  of  indent, the
       option `-nip' is provided, which is equivalent to  `-ip0'.

       ANSI  C  allows  white  space to be placed on preprocessor
       command lines between the character `#'  and  the  command
       name.  By default, iinnddeenntt removes this space, but specify-
       ing the `-lps' option directs iinnddeenntt to leave  this  space
       unmodified.  The  option  `-ppi'  overrides   `-nlps'  and
       `-lps'.

       This option can be used to request that preprocessor  con-
       ditional  statements can be indented by to given number of
       spaces, for example with the option `-ppi 3'

            #if X
            #if Y
            #define Z 1
            #else
            #define Z 0
            #endif
            #endif
       becomes
            #if X
            #   if Y
            #      define Z 1
            #   else
            #      define Z 0
            #   endif
            #endif


BBRREEAAKKIINNGG LLOONNGG LLIINNEESS
       With the option `-l_n', or `--line-length_n', it is possible
       to  specify  the  maximum  length of a line of C code, not
       including possible comments that follow it.




                                                               21





INDENT(1L)                                             INDENT(1L)


       When lines become longer then the specified  line  length,
       GNU  iinnddeenntt  tries  to  break the line at a logical place.
       This is new as of version 2.1 however and not very  intel-
       ligent or flexible yet.

       Currently  there are two options that allows one to inter-
       fere with the algorithm that determines where to  break  a
       line.

       The  `-bbo'  option  causes  GNU iinnddeenntt to prefer to break
       long lines before the boolean operators &&&&  and  ||||.   The
       `-nbbo' option causes GNU iinnddeenntt not have that preference.
       For example, the  default  option  `-bbo'  (together  with
       `--line-length60' and `--ignore-newlines') makes code look
       like this:

              if (mask
                  && ((mask[0] == '\0')
                      || (mask[1] == '\0'
                          && ((mask[0] == '0') || (mask[0] == '*')))))

       Using the option `-nbbo' will make it look like this:

              if (mask &&
                  ((mask[0] == '\0') ||
                   (mask[1] == '\0' &&
                    ((mask[0] == '0') || (mask[0] == '*')))))

       The default `-hnl', however, honours newlines in the input
       file by giving them the highest possible priority to break
       lines at.  For example, when the  input  file  looks  like
       this:

              if (mask
                  && ((mask[0] == '\0')
                  || (mask[1] == '\0' && ((mask[0] == '0') || (mask[0] == '*')))))

       then  using  the  option  `-hnl',  or `--honour-newlines',
       together  with  the  previously  mentioned   `-nbbo'   and
       `--line-length60', will cause the output not to be what is
       given in the last example but instead will prefer to break
       at  the  positions  where the code was broken in the input
       file:

              if (mask
                  && ((mask[0] == '\0')
                      || (mask[1] == '\0' &&
                          ((mask[0] == '0') || (mask[0] == '*')))))

       The idea behind this option is that lines  which  are  too
       long,  but  are  already broken up, will not be touched by
       GNU iinnddeenntt.  Really  messy  code  should  be  run  through
       iinnddeenntt  at least once using the `--ignore-newlines' option
       though.



                                                               22





INDENT(1L)                                             INDENT(1L)


DDIISSAABBLLIINNGG FFOORRMMAATTTTIINNGG
       Formatting of C code may be disabled  for  portions  of  a
       program  by embedding special _c_o_n_t_r_o_l _c_o_m_m_e_n_t_s in the pro-
       gram.  To turn off formatting for a section of a  program,
       place  the disabling control comment //** **IINNDDEENNTT--OOFFFF** **// on
       a line by itself just before that section.   Program  text
       scanned  after this control comment is output precisely as
       input  with  no  modifications  until  the   corresponding
       enabling comment is scanned on a line by itself.  The dis-
       abling control comment is //** **IINNDDEENNTT--OONN** **//, and any  text
       following the comment on the line is also output unformat-
       ted.  Formatting begins again with the input line  follow-
       ing the enabling control comment.

       More  precisely,  iinnddeenntt  does  not  attempt to verify the
       closing delimiter (**//)  for  these  C  comments,  and  any
       whitespace on the line is totally transparent.

       These control comments also function in their C++ formats,
       namely //// **IINNDDEENNTT--OOFFFF** and //// **IINNDDEENNTT--OONN**.

       It should be noted  that  the  internal  state  of  iinnddeenntt
       remains  unchanged over the course of the unformatted sec-
       tion.  Thus, for example, turning off  formatting  in  the
       middle  of  a  function and continuing it after the end of
       the function may lead to bizarre results.  It is therefore
       wise  to  be somewhat modular in selecting code to be left
       unformatted.

       As a historical note, some earlier versions of iinnddeenntt pro-
       duced error messages beginning with **IINNDDEENNTT****.  These ver-
       sions of iinnddeenntt were written  to  ignore  any  input  text
       lines  which  began  with  such  error  messages.   I have
       removed this incestuous feature from GNU iinnddeenntt.


MMIISSCCEELLLLAANNEEOOUUSS OOPPTTIIOONNSS
       To find out what version of iinnddeenntt you have, use the  com-
       mand  iinnddeenntt --vveerrssiioonn. This will report the version number
       of iinnddeenntt, without doing any of the normal processing.

       The `-v' option can be used to turn on verbose mode.  When
       in verbose mode, iinnddeenntt reports when it splits one line of
       input into two more more lines of output, and  gives  some
       size statistics at completion.

       The `-pmt' option causes iinnddeenntt to preserve the access and
       modification times on the output files.  Using this option
       has  the  advantage  that running indent on all source and
       header files in a project won't cause mmaakkee to rebuild  all
       targets.   This option is only available on Operating Sys-
       tems that have the POSIX uuttiimmee((22)) function.





                                                               23





INDENT(1L)                                             INDENT(1L)


BBUUGGSS
       Please report any bugs to bug-indent@gnu.org.

       When iinnddeenntt is run twice on a file, with the same profile,
       it  should  _n_e_v_e_r  change that file the second time.  With
       the current design of iinnddeenntt, this can not be  guaranteed,
       and it has not been extensively tested.

       iinnddeenntt  does not understand C. In some cases this leads to
       the inability to join lines.  The result is that running a
       file  through  iinnddeenntt  is  _i_r_r_e_v_e_r_s_i_b_l_e,  even if the used
       input file was the result of running iinnddeenntt with  a  given
       profile (`.indent.pro').

       While  an  attempt was made to get iinnddeenntt working for C++,
       it will not do a good job on any  C++  source  except  the
       very simplest.

       iinnddeenntt  does  not look at the given `--line-length' option
       when writing comments to the output  file.   This  results
       often in comments being put far to the right.  In order to
       prohibit iinnddeenntt from joining a broken line that has a com-
       ment  at the end, make sure that the comments start on the
       first line of the break.

       iinnddeenntt does not count lines and  comments  (see  the  `-v'
       option) when iinnddeenntt is turned off with //** **IINNDDEENNTT--OOFFFF** **//.

       Comments of the form //**UUPPPPEERRCCAASSEE**// are not treated as com-
       ment  but as an identifier, causing them to be joined with
       the next line. This renders comments of this type useless,
       unless they are embedded in the code to begin with.


CCOOPPYYRRIIGGHHTT
       The  following copyright notice applies to the iinnddeenntt pro-
       gram.  The copyright and copying permissions for this man-
       ual  appear  near  the  beginning  of `indent.texinfo' and
       `indent.info', and near the end of `indent.1'.

       Copyright (c) 2001 David Ingamells.
       Copyright (c) 1999 Carlo Wood.
       Copyright (c) 1995, 1996 Joseph Arceneaux.
       Copyright (c) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation
       Copyright (c) 1985 Sun Microsystems, Inc.
       Copyright (c) 1980 The Regents of the University of California.
       Copyright (c) 1976 Board of Trustees of the University of Illinois.
       All rights reserved.

       Redistribution and use in source and binary forms are permitted
       provided that the above copyright notice and this paragraph are
       duplicated in all such forms and that any documentation,
       advertising materials, and other materials related to such
       distribution and use acknowledge that the software was developed



                                                               24





INDENT(1L)                                             INDENT(1L)


       by the University of California, Berkeley, the University of Illinois,
       Urbana, and Sun Microsystems, Inc.  The name of either University
       or Sun Microsystems may not be used to endorse or promote products
       derived from this software without specific prior written permission.
       THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
       IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
       WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
       PURPOSE.


OOppttiioonnss'' CCrroossss KKeeyy
       Here is a list of options alphabetized by long option,  to
       help you find the corresponding short option.


            --blank-lines-after-commas                      -bc
            --blank-lines-after-declarations                -bad
            --blank-lines-after-procedures                  -bap
            --blank-lines-before-block-comments             -bbb
            --braces-after-if-line                          -bl
            --brace-indent                                  -bli
            --braces-after-struct-decl-line                 -bls
            --braces-on-if-line                             -br
            --braces-on-struct-decl-line                    -brs
            --break-after-boolean-operator                  -nbbo
            --break-before-boolean-operator                 -bbo
            --break-function-decl-args                      -bfda
            --break-function-decl-args-end                  -bfde
            --case-indentation                              -cli_n
            --case-brace-indentation                        -cbi_n
            --comment-delimiters-on-blank-lines             -cdb
            --comment-indentation                           -c_n
            --continuation-indentation                      -ci_n
            --continue-at-parentheses                       -lp
            --cuddle-do-while                               -cdw
            --cuddle-else                                   -ce
            --declaration-comment-column                    -cd_n
            --declaration-indentation                       -di_n
            --dont-break-function-decl-args                 -nbfda
            --dont-break-function-decl-args-end             -nbfde
            --dont-break-procedure-type                     -npsl
            --dont-cuddle-do-while                          -ncdw
            --dont-cuddle-else                              -nce
            --dont-format-comments                          -nfca
            --dont-format-first-column-comments             -nfc1
            --dont-line-up-parentheses                      -nlp
            --dont-space-special-semicolon                  -nss
            --dont-star-comments                            -nsc
            --else-endif-column                             -cp_n
            --format-all-comments                           -fca
            --format-first-column-comments                  -fc1
            --gnu-style                                     -gnu
            --honour-newlines                               -hnl
            --ignore-newlines                               -nhnl



                                                               25





INDENT(1L)                                             INDENT(1L)


            --ignore-profile                                -npro
            --indent-level                                  -i_n
            --k-and-r-style                                 -kr
            --leave-optional-blank-lines                    -nsob
            --leave-preprocessor-space                      -lps
            --line-comments-indentation                     -d_n
            --line-length                                   -l_n
            --no-blank-lines-after-commas                   -nbc
            --no-blank-lines-after-declarations             -nbad
            --no-blank-lines-after-procedures               -nbap
            --no-blank-lines-before-block-comments          -nbbb
            --no-comment-delimiters-on-blank-lines          -ncdb
            --no-space-after-casts                          -ncs
            --no-parameter-indentation                      -nip
            --no-space-after-for                    -nsaf
            --no-space-after-function-call-names            -npcs
            --no-space-after-if                -nsai
            --no-space-after-parentheses                    -nprs
            --no-space-after-while                  -nsaw
            --no-tabs                                       -nut
            --no-verbosity                                  -nv
            --original                                      -orig
            --parameter-indentation                         -ip_n
            --paren-indentation                             -pi_n
            --preserve-mtime                   -pmt
            --procnames-start-lines                         -psl
            --space-after-cast                              -cs
            --space-after-for                  -saf
            --space-after-if                   -sai
            --space-after-parentheses                       -prs
            --space-after-procedure-calls                   -pcs
            --space-after-while                -saw
            --space-special-semicolon                       -ss
            --standard-output                               -st
            --start-left-side-of-comments                   -sc
            --struct-brace-indentation                      -sbi_n
            --swallow-optional-blank-lines                  -sob
            --tab-size                                      -ts_n
            --use-tabs                                      -ut
            --verbose                                       -v


RREETTUURRNN VVAALLUUEE
       Unknown

FFIILLEESS
       _$_H_O_M_E_/_._i_n_d_e_n_t_._p_r_o   holds default options for indent.

AAUUTTHHOORRSS
       Carlo Wood
       Joseph Arceneaux
       Jim Kingdon
       David Ingamells




                                                               26





INDENT(1L)                                             INDENT(1L)


HHIISSTTOORRYY
       Derived from the UCB program "indent".

CCOOPPYYIINNGG
       Copyright  (C)  1989,  1992,  1993,  1994, 1995, 1996 Free
       Software Foundation, Inc.  Copyright (C) 1995, 1996 Joseph
       Arceneaux.   Copyright (C) 1999 Carlo Wood.  Copyright (C)
       2001 David Ingamells.

       Permission is granted  to  make  and  distribute  verbatim
       copies  of  this  manual provided the copyright notice and
       this permission notice are preserved on all copies.













































                                                               27


